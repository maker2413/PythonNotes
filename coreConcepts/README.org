#+TITLE: Core Concepts
#+PROPERTY: header-args:python :session concepts
#+PROPERTY: header-args:python+ :tangle core-concepts.py
#+PROPERTY: header-args:python+ :results output
#+PROPERTY: header-args:python+ :shebang "#!/usr/bin/env python"

This guide is just going to rapid fire some of the basics of Python. These notes
aren't going to be entirely great especially if you have never tried to learn a
programming language. This is because I learned Python about a decade ago and I
didn't take notes back then.

Most of these will be taken from [[https://learnxinyminutes.com/docs/python/][Learn X in Y minutes]].

Comments:
#+begin_src python :results none :tangle no
  # Single line comments are like this

  """ Multiline comments can be written
      using three "s, and are often used
      as documentation
  """
#+end_src

Python has support for all of the basic [[https://notes.ethancpost.com/data_types.html][Primitives]]:
#+begin_src python :results none :tangle no
  # Integers
  3
  2413
  72

  # Booleans
  True
  False

  # Strings (Can be created with ' or ")
  "This is a string"
  'This is also a string'

  # Multi line Strings are also possible with triple quotes
  """This is a
     string.
  """
  '''So is
     this!
  '''

  # Floats
  0.3
  3.14
  2.5
#+end_src

[[https://notes.ethancpost.com/variables.html][Variable]] declaration in python is done without specifying type:
#+begin_src python :results none :tangle no
  a = 3
  b = "hello"
  c = 2.134872
  d = True
#+end_src

You can also check the type of any value or variable with ~type()~:
#+name: type
#+begin_src python :exports both
  a = 248.1231238

  # You can escape characters with \ so they get printed
  print("variable \"a\" has a type of:", type(a))
#+end_src

This would print:
#+RESULTS: type
: <class 'float'>

Python also has a complex type:
#+name: complex
#+begin_src python :exports both
  x = 1+2j

  print("variable \"x\" has a type of:", type(x))
#+end_src

This would print:
#+RESULTS: complex
: variable "x" has a type of: <class 'complex'>

Python has support for all of the basic arithmetic operators:
#+name: arithemtic
#+begin_src python :exports both
  print("addition:", 10+25)
  print("subtraction:", 2-9)
  print("multiplication:", 4*24)
  print("division:", 72/6)
  print("exponents:", 2**8)
#+end_src

With the above we would get this:
#+RESULTS: arithemtic
: addition: 35
: subtraction: -7
: multiplication: 96
: division: 12.0
: exponents: 256

Python also has support for [[notes.ethancpost.com/modulo.html][Modulo]]:
#+name: modulo
#+begin_src python :exports both
  print("The remainder (mod) of 19 and 5 is:", 19%5)
#+end_src

In this case:
#+RESULTS: modulo
: The remainder (mod) of 19/5 is: 4

Python also has all of the basic [[https://notes.ethancpost.com/operators.html][comparison operators]]:
#+name: comparison
#+begin_src python :exports both
  x = 10
  y = 25

  print("x =", x, "and y =", y)
  print("x is greater than y:", x > y)
  print("x is less than y:", x < y)
  print("x is greater than or equal to y:", x >= y)
  print("x is less than or equal to 10:", x <= 10)
  print("y is equal to 27:", y == 27)
  print("x is not equal to 11:", x != 11)
#+end_src

With the above we would get:
#+RESULTS: comparison
: x = 10 and y = 25
: x is greater than y: False
: x is less than y: True
: x is greater than or equal to y: False
: x is less than or equal to 10: True
: y is equal to 27: False
: x is not equal to 11: True

Python also has the standard [[https://notes.ethancpost.com/operators.html][assignment operators]]:
#+name: assignment
#+begin_src python :exports both
  x = 5

  print("x =", x)
  x += 1
  print("x += 1:", x)
  x -= 2
  print("x -= 2:", x)
  x *= 4
  print("x *= 4:", x)
  x /= 2
  print("x /= 2:", x)
  x %= 3
  print("x %= 3:", x)
#+end_src

These would give us:
#+RESULTS: assignment
: x = 5
: x += 1: 6
: x -= 2: 4
: x *= 4: 16
: x /= 2: 8.0
: x %= 3: 2.0

Python also offers different forms of string manipulation:
#+name: manipulation
#+begin_src python :exports both
  a = "python"
  b = "project"

  print("Concatenation:", a + b)
  print("Repetition:", a*2)

  # Membership operator
  print('project' in  a)

  print("length of a:", len(a))
#+end_src

We can see those prints give us:
#+RESULTS: manipulation
: Concatenation: pythonproject
: Repetition: pythonpython
: False
: length of a: 6

Python also allows us to index or slice a string:
#+name: indexslice
#+begin_src python :exports both
  a = "hello, thank you for reading through my notes!"

  # index starts from zero like most languages
  print(a[9])

  # Slicing is done like: string[start:stop]
  print(a[7:16])
#+end_src

Our index and slice will be:
#+RESULTS: indexslice
: a
: thank you

There are also many builtin functions to manipulate strings in Python. Let's
look at a few examples:
#+name: stringfunctions
#+begin_src python :exports both
  a = "hello, thank you for reading through my notes!"
  b = "HELLO"
  c = "hello"
  d = "   hello   "

  # Capitalize first letter
  print(a.capitalize())

  # Checks if string is alpha numeric or not
  print(a.isalnum())

  # Makes whole string lower case
  print(b.lower())

  # Makes whole string upper case
  print(c.upper())

  # Remove spaces at the beginning and at the end of the string
  print(d.strip())
#+end_src

That would give us:
#+RESULTS: stringfunctions
: Hello, thank you for reading through my notes!
: False
: hello
: HELLO
: hello

Lists in Python are mutable [[https://notes.ethancpost.com/data_types.html][data types]] designed for storing a group of items:
#+name: lists
#+begin_src python :exports both
  x = [20, 30, "hello", "world", 12.25]

  print("x type:", type(x), "x contains:", x)
#+end_src

#+RESULTS: lists
: x type: <class 'list'> x contains: [20, 30, 'hello', 'world', 12.25]

We can also perform operations on lists:
#+name: listoperations
#+begin_src python :exports both
  x = [10, 20]
  y = ['hello', 'world']

  print("Concate:", x + y)
  print("Repetition:", x * 3)
  print("10 in x:", 10 in x)
  print(len(x))
  print("First index in x:", x[0])
  print("Slice of x and y:", (x+y)[0:3])

  # Append
  x.append(42)
  print("append 42 to x:", x)

  # Remove
  x.remove(20)
  print("remove 20 from x:", x)
#+end_src

This gives us:
#+RESULTS: listoperations
: Concate: [10, 20, 'hello', 'world']
: Repetition: [10, 20, 10, 20, 10, 20]
: 10 in x: True
: 2
: First index in x: 10
: Slice of x and y: [10, 20, 'hello']
: append 42 to x: [10, 20, 42]
: remove 20 from x: [10, 42]

Tuples in Python are like lists, but are immutable:
#+name: tuples
#+begin_src python :exports both
  tup = (10, 20, 'welcome', 'mlops', 12.567)

  print(type(tup))
  print(tup)
#+end_src

Tada:
#+RESULTS: tuples
: <class 'tuple'>
: (10, 20, 'welcome', 'mlops', 12.567)

Tuples can also have operations done on them, although limited due to tuples
being immutable:
#+name: tupleoperations
#+begin_src python :exports both
  print("Concate:", tup + tup)
  print("Repetition:", tup * 2)

  print("Index 2:", tup[2])
  print("Slice:", tup[0:3])
#+end_src

#+RESULTS: tupleoperations
: Concate: (10, 20, 'welcome', 'mlops', 12.567, 10, 20, 'welcome', 'mlops', 12.567)
: Repetition: (10, 20, 'welcome', 'mlops', 12.567, 10, 20, 'welcome', 'mlops', 12.567)
: Index 2: welcome
: Slice: (10, 20, 'welcome')

In Python, a dictionary is a versatile and mutable data type that is used to
store key-value pairs. Dictionaries are also indexed by the keys rather than by
an index number:
#+name: dictionary
#+begin_src python :exports both
  x = {'number': 9000, "name": "john", 'age': 25, 'city': 'New York'}

  print(x)
  print("Name:", x['name'])

  x['age'] = 55
  print("New Age:", x['age'])
#+end_src

This gives us:
#+RESULTS: dictionary
: {'number': 9000, 'name': 'john', 'age': 25, 'city': 'New York'}
: Name: john
: New Age: 55

Dictionaries can also have operations done on them:
#+name: dictionaryoperations
#+begin_src python :exports both
  print(len(x))
  print(x.keys())
  print(x.values())
  print(x.items())
#+end_src

This gives us:
#+RESULTS: dictionaryoperations
: 4
: dict_keys(['number', 'name', 'age', 'city'])
: dict_values([9000, 'john', 55, 'New York'])
: dict_items([('number', 9000), ('name', 'john'), ('age', 55), ('city', 'New York')])

Python also has sets, which an unordered mutable collection of *unique*
elements:
#+name: sets
#+begin_src python :exports both
  m = {10, 20, 30, "hello", "welcome", 100, 100, "hi"}

  print("Notice how the order changes:", m)
  print("Also notice how there was only one instance of 100")
#+end_src

This gives us:
#+RESULTS: sets
: Notice how the order changes: {'hello', 100, 20, 'welcome', 'hi', 10, 30}
: Also notice how there was only one instance of 100

Of course we can also run operations on sets:
#+name: setoperations
#+begin_src python :exports both
  print(len(m))
  print("hi" in m)
#+end_src

Boom:
#+RESULTS: setoperations
: 7
: True

Casting in Python refers to the process of converting one data type to another:
#+name: casting
#+begin_src python :exports both
  x = 3.14

  x = int(x)
  print("Cast x to int:", x, "type:", type(x))
  x = float(x)
  print("Recast x to float", x, "type:", type(x))
  x = str(x)
  print("Cast x to string", x, "type:", type(x))
#+end_src

Output:
#+RESULTS: casting
: Cast x to int: 3 type: <class 'int'>
: Recast x to float 3.0 type: <class 'float'>
: Cast x to string 3.0 type: <class 'str'>

Python also has the standard [[https://notes.ethancpost.com/conditionals.html][conditionals]] that most programming languages have:
#+name: conditionals
#+begin_src python :exports both
  x = 10

  if x > 0:
      print("x is greater than 0")

  x = -10
  if x > 0:
      print("x is greater than 0")
  elif x == 0:
      print("x is equal to 0")
  else:
      print("x is less than 0")
#+end_src

This is what our two if/else blocks would output:
#+RESULTS: conditionals
: x is greater than 0
: x is less than 0

Python also has a ~for~ loop and ~while~ loop like most programming languages:
#+name: loops
#+begin_src python :exports both
  fruits = ["apple", 'banana', 'cherry']

  print("For Loop:")
  for i in fruits:
      print("Fruit:", i)

  count = 0

  print("\nWhile Loop:")
  while count < 3:
      print(count)
      count += 1
#+end_src

We can see how our loops work when we run them:
#+RESULTS: loops
: For Loop:
: Fruit: apple
: Fruit: banana
: Fruit: cherry
: 
: While Loop:
: 0
: 1
: 2

If we ever need to exit a loop prematurely we can use ~break~:
#+name: break
#+begin_src python :exports both
  for i in fruits:
      print("Fruit:", i)
      if i == "banana":
          break
#+end_src

We can see that when we hit =banana= we break out of the loop:
#+RESULTS: break
: Fruit: apple
: Fruit: banana

There is also a ~continue~ statement, which can be used to skip the rest of the
code in a loop for the current iteration:
#+name: continue
#+begin_src python :exports both
  for i in fruits:
      if i == 'apple':
          continue
      print("Fruit:", i)
#+end_src

We can see that we didn't print when we were on the =apple= iteration:
#+RESULTS: continue
: Fruit: banana
: Fruit: cherry

We can also use for loops in a variable declaration in Python:
#+name: listcomprehention
#+begin_src python :exports both
  x = [1, 2, 3, 4, 5, 6, 7, 8]

  results = [i**2 for i in x]

  print(results)
#+end_src

We used a for loop to square each value in our list:
#+RESULTS: listcomprehention
: [1, 4, 9, 16, 25, 36, 49, 64]

[[https://notes.ethancpost.com/functions.html][Functions]] are declared in Python like the following:
#+name: functions
#+begin_src python :exports both
  def greet(name):
      print(f"Hello {name}!")

  greet("Maker")
#+end_src

We were able to call our greet function with an input string:
#+RESULTS: functions
: Hello Maker!

Functions in Python can also return values:
#+name: return
#+begin_src python :exports both
  def add_numbers(a, b):
      result = a + b
      return result

  x = add_numbers(5, 12)

  print(x)
#+end_src

We can see that our function returned the result and we were able to set it to
variable. When we print that variable we get:
#+RESULTS: return
: 17

We can also default input values so they can be optionally provided:
#+name: defaultinput
#+begin_src python :exports both
  def sub_numbers(a, b=1):
      result = a - b
      return result

  x = sub_numbers(10)

  print(x)
#+end_src

We can see that even though we only provided one input ~b~ was default to 1:
#+RESULTS: defaultinput
: 9

At this point I am sick of covering basic concepts for python. I may add more to
this later, but honestly python is quite easy to understand if you know any
other programming language.

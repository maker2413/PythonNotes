#+TITLE: Core Concepts
#+PROPERTY: header-args:python :session concepts
#+PROPERTY: header-args:python+ :tangle core-concepts.py
#+PROPERTY: header-args:python+ :results output
#+PROPERTY: header-args:python+ :shebang "#!/usr/bin/env python"

Most of these will be taken from [[https://learnxinyminutes.com/docs/python/][Learn X in Y minutes]].

Comments:
#+begin_src python :results none :tangle no
  # Single line comments are like this

  """ Multiline comments can be written
      using three "s, and are often used
      as documentation
  """
#+end_src

Python has support for all of the basic [[https://notes.ethancpost.com/data_types.html][Primitives]]:
#+begin_src python :results none :tangle no
  # Integers
  3
  2413
  72

  # Booleans
  True
  False

  # Strings (Can be created with ' or ")
  "This is a string"
  'This is also a string'

  # Multi line Strings are also possible with triple quotes
  """This is a
     string.
  """
  '''So is
     this!
  '''

  # Floats
  0.3
  3.14
  2.5
#+end_src

[[https://notes.ethancpost.com/variables.html][Variable]] declaration in python is done without specifying type:
#+begin_src python :results none :tangle no
  a = 3
  b = "hello"
  c = 2.134872
  d = True
#+end_src

You can also check the type of any value or variable with ~type()~:
#+name: type
#+begin_src python :exports both
  a = 248.1231238

  # You can escape characters with \ so they get printed
  print("variable \"a\" has a type of:", type(a))
#+end_src

This would print:
#+RESULTS: type
: <class 'float'>

Python also has a complex type:
#+name: complex
#+begin_src python :exports both
  x = 1+2j

  print("variable \"x\" has a type of:", type(x))
#+end_src

This would print:
#+RESULTS: complex
: variable "x" has a type of: <class 'complex'>

Python has support for all of the basic arithmetic operators:
#+name: arithemtic
#+begin_src python :exports both
  print("addition:", 10+25)
  print("subtraction:", 2-9)
  print("multiplication:", 4*24)
  print("division:", 72/6)
  print("exponents:", 2**8)
#+end_src

With the above we would get this:
#+RESULTS: arithemtic
: addition: 35
: subtraction: -7
: multiplication: 96
: division: 12.0
: exponents: 256

Python also has support for [[notes.ethancpost.com/modulo.html][Modulo]]:
#+name: modulo
#+begin_src python :exports both
  print("The remainder (mod) of 19 and 5 is:", 19%5)
#+end_src

In this case:
#+RESULTS: modulo
: The remainder (mod) of 19/5 is: 4

Python also has all of the basic [[https://notes.ethancpost.com/operators.html][comparison operators]]:
#+name: comparison
#+begin_src python :exports both
  x = 10
  y = 25

  print("x =", x, "and y =", y)
  print("x is greater than y:", x > y)
  print("x is less than y:", x < y)
  print("x is greater than or equal to y:", x >= y)
  print("x is less than or equal to 10:", x <= 10)
  print("y is equal to 27:", y == 27)
  print("x is not equal to 11:", x != 11)
#+end_src

With the above we would get:
#+RESULTS: comparison
: x = 10 and y = 25
: x is greater than y: False
: x is less than y: True
: x is greater than or equal to y: False
: x is less than or equal to 10: True
: y is equal to 27: False
: x is not equal to 11: True

Python also has the standard [[https://notes.ethancpost.com/operators.html][assignment operators]]:
#+name: assignment
#+begin_src python :exports both
  x = 5

  print("x =", x)
  x += 1
  print("x += 1:", x)
  x -= 2
  print("x -= 2:", x)
  x *= 4
  print("x *= 4:", x)
  x /= 2
  print("x /= 2:", x)
  x %= 3
  print("x %= 3:", x)
#+end_src

These would give us:
#+RESULTS: assignment
: x = 5
: x += 1: 6
: x -= 2: 4
: x *= 4: 16
: x /= 2: 8.0
: x %= 3: 2.0

Python also offers different forms of string manipulation:
#+name: manipulation
#+begin_src python :exports both
  a = "python"
  b = "project"

  print("Concatenation:", a + b)
  print("Repetition:", a*2)

  # Membership operator
  print('project' in  a)

  print("length of a:", len(a))
#+end_src

We can see those prints give us:
#+RESULTS: manipulation
: Concatenation: pythonproject
: Repetition: pythonpython
: False
: length of a: 6

Python also allows us to index or slice a string:
#+name: indexslice
#+begin_src python :exports both
  a = "hello, thank you for reading through my notes!"

  # index starts from zero like most languages
  print(a[9])

  # Slicing is done like: string[start:stop]
  print(a[7:16])
#+end_src

Our index and slice will be:
#+RESULTS: indexslice
: a
: thank you

There are also many builtin functions to manipulate strings in Python. Let's
look at a few examples:
#+name: stringfunctions
#+begin_src python :exports both
  a = "hello, thank you for reading through my notes!"
  b = "HELLO"
  c = "hello"
  d = "   hello   "

  # Capitalize first letter
  print(a.capitalize())

  # Checks if string is alpha numeric or not
  print(a.isalnum())

  # Makes whole string lower case
  print(b.lower())

  # Makes whole string upper case
  print(c.upper())

  # Remove spaces at the beginning and at the end of the string
  print(d.strip())
#+end_src

That would give us:
#+RESULTS: stringfunctions
: Hello, thank you for reading through my notes!
: False
: hello
: HELLO
: hello

At this point I am sick of covering basic concepts for python. I may add more to
this later, but honestly python is quite easy to understand if you know any
other programming language.
